; weekly scheduled crontab
; example by ma5ter

; settings
;mo_start_h equ 8 
;mo_start_m equ 30
;mo_duration equ 10 ; up to 12 bits

;tu_start_h equ 10 
;tu_start_m equ 0
;tu_duration equ 90

;we_start_h equ 10 
;we_start_m equ 20
;we_duration equ 30

;th_start_h equ 0 
;th_start_m equ 0
;th_duration equ 0

;fr_start_h equ 10 
;fr_start_m equ 15
;fr_duration equ 50

;sa_start_h equ 0 
;sa_start_m equ 0
;sa_duration equ 0

;su_start_h equ 2
;su_start_m equ 29
;su_duration equ 5

;time_zone equ 0

;action equ 1

; common TOS sizes
b equ 0
w equ 1
dw equ 2

pb macro ; byte
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

pw macro ; word
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; mov instruction with parameters
up macro
 psh (((($1 & 3) | ($2 << 2)) >> 4) & 15)
 nib (($1 & 3) | ($2 << 2) & 15)
 mov
endm

; exp instruction with parameters
ex macro
 psh ($1 & 3)
 nib ((($3 & 1) << 3) | ($2 & 3))
 exp
endm

; macro to generate selector for time span
; parameters:
;   $1 - start hour
;   $2 - start minute
;   $3 - duration in minutes
; on entry TOS contains return address
selector macro
 psh (($3 >> 8) & 15)
 psh (($3 >> 4) & 15)
 nop ; to avoid optimization of psh-nib
 nib ($3 & 15)
 psh $2
 psh $1
 psh check_time_zone
 jmp b
endm
selector_size equ 8

; BEGIN
 ; dispose previous result
 pop b

 ; input weekday
 pb RT_DAY
 inp b, b
 ; choose selector
 ; selector size is a power of 2
 pb selector_size
 mul b
 ; select desired interval
 pb day_selector
 add b
 for b
 ; N-flag = 0 means period match
 skp
 bra set_off
 bra set_on
 
set_off
 psh ~action & 1
 ret
 
set_on
 nib action & 1
 ret

check_time_zone
 ex b, w, 0
 pw 60
 mul w
 up b, 2
 ex b, w, 0
 add w
 pw time_zone
 pw 32768
 and w
 pop w
 skz
 bra minus
 
plus
 pw time_zone
 sub w
 skn
 bra check_time_span
 pw 1440
 add w
 bra check_time_span
 
minus
 pw time_zone
 sub w
 dup w
 pw 1440
 sub w
 skp
 bra 1
 swp w
 pop w

; subroutine to return value for time span
; on entry TOS contains:
;   start hour
;   start minute
;   duration
; on return N-flag contains 0 - match 1 - mismatch
; NOTE: due to optimisation entry point should reside within 63 first addresses 
check_time_span

 
 ; get realtime day minute offset
 pb RT_HOUR
 inp b, w
 pw 60
 mul w
 pb RT_MIN
 inp b, w
 add w
 
 ; check start
 swp w
 sub w

 skp
 ; too early
 bra check_dispose_ret

 ; when comparing duration add `one` to ensure minumum duration greater than 0
 inc w
 cmp w
 jmp b

check_dispose_ret
 pop dw ; dispose difference & duration
 jmp b ; return


; each day selector size is exactly `selector_size` bytes
day_selector
 selector mo_start_h, mo_start_m, mo_duration
 selector tu_start_h, tu_start_m, tu_duration
 selector we_start_h, we_start_m, we_duration
 selector th_start_h, th_start_m, th_duration
 selector fr_start_h, fr_start_m, fr_duration
 selector sa_start_h, sa_start_m, sa_duration
 selector su_start_h, su_start_m, su_duration