; common TOS sizes
b equ 0
w equ 1
dw equ 2

 ;   parameters, uncomment for debug
;sections equ 2 ; (param) mask that point on tracked sections
;delay equ 3 ; (param) delay in seconds
;action equ 1 ; (param) what to do `on` or `off` when active

pb macro ; byte
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; push word macro
pw macro
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; exp instruction with parameters
ex macro
 psh ($1 & 3)
 nib ((($3 & 1) << 3) | ($2 & 3))
 exp
endm

; mov instruction with parameters
up macro
 psh (((($1 & 3) | ($2 << 2)) >> 4) & 15)
 nib (($1 & 3) | ($2 << 2) & 15)
 mov
endm

; BEGIN
check_switch
 pb HAS_SWITCH
 inp b, b
 pop b
 snz
 bra check_state ; continue
 ;pb change_state ; has switch
 
change_state
 swp b
 pop b
 pb SWITCH
 inp b, b
 pop b
 snz
 bra set_work ; set work
 pop w ; set stop
 pop dw
 psh 1
 psh 0
 ret
 
set_work
 psh 0
 swp b
 
check_state
 swp b
 dup b
 pop b
 snz
 bra check_sections ; worked
 swp b
 pop b
 psh 0 ; stopped
 ret
 
check_sections
 swp b
 pb sections
 pop b
 snz
 bra zero_sections
 psh action
 xor b
 pop b
 skz
 bra check_armed ; was off
 pb ARMED_SECTIONS ; was on
 inp b, b
 pb sections
 and b
 pb GUARD_SECTIONS
 inp b, b
 pb sections
 and b
 cmp b
 snz
 bra check_delay ; armed 
 pop w ; disarmed
 pop dw
 bra set_on
 
zero_sections
 pop b
 bra set_off

check_armed
 pb ARMED_SECTIONS
 inp b, b
 pb sections
 and b
 pb GUARD_SECTIONS
 inp b, b
 pb sections
 and b
 cmp b
 snz
 bra set_off ; armed
 ; disarmed
 
set_on
 psh action & 1
 ret
 
set_off
 psh ~action & 1
 ret 

check_delay
 up b, 1
 pop b
 skz
 bra check_timer ; check timer
 ; start timer

start_timer
 psh TIMESTAMP
 inp b, dw
 pw delay
 ex w, dw, 1
 add dw
 psh 1
 up b, 5
 bra set_on
 
check_timer
 up dw, 1
 dup dw
 psh TIMESTAMP
 inp b, dw
 cmp dw
 snz
 bra time ; it's time
 skp
 bra time ; it's time
 psh 1 ; not yet
 up b, 5
 pb set_on
 jmp b
 
time
 pop dw
 psh 0
 swp b
 pb set_off
 jmp b