; corridor lamp

; settings
;source_zones equ 1 ; (param) zone id to detect from
;delay_to_off equ 45 ; (param) time to off after no detection (up to 16 bits in seconds)
;active_state equ 1 ; (param) what to do `on` or `off` when active
;from equ 1212 ; (param) period start time in minutes
;to equ 1212 ; (param) period end time in minutes

; common TOS sizes
b equ 0
w equ 1
dw equ 2

; push byte macro
pb macro
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; push word macro
pw macro
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

pd macro ; dword
 psh (($1 >> 28) & 15)
 nib (($1 >> 24) & 15)
 psh (($1 >> 20) & 15)
 nib (($1 >> 16) & 15)
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; mov instruction with parameters
up macro
 psh (((($1 & 3) | ($2 << 2)) >> 4) & 15)
 nib (($1 & 3) | ($2 << 2) & 15)
 mov
endm

; exp instruction with parameters
ex macro
 psh ($1 & 3)
 nib ((($3 & 1) << 3) | ($2 & 3))
 exp
endm

; BEGIN
 ; check 'last state'
 ; if 'last state' is active - check detector
 ; else - continue
 psh active_state
 xor b
 pop b
 snz
 bra check_detector
 pw to ; get 'start period time'
 pw from ; get 'end period time'
 ; compare 'start period time' and 'end period time'
 ; if they are equal - dispose period times and go check detector
 ; else go check_time_span
 dup dw
 cmp w
 skz
 bra has_timetable
no_timetable
 pop dw
 bra check_detector
has_timetable
 pb check_time_span
 jmp b

check_sched
 ; read flag to check detector or not
 ; if has flag - check detector
 ; else - deactivate
 pop b
 skz
 bra check_detector
 pb do_deactivate
 jmp b
 
check_detector
 ; get 'source zones mask'
 pd source_zones
 ; set 'current zone id'
 psh 0
loop
 ; increment 'current zone id'
 inc b
 dup b ; save 'current zone id'
 ; check if all zones iterated
 ; if yes - no active detector - set off
 ; else - continue
 psh 33
 cmp b
 skp
 bra continue
no_active_detectors
 pb detector_inactive
 jmp b
continue
 up dw, 1 ; bring 'source zones mask' to top
 dup b ; save low byte
 psh 1 ; set 1 for check
 ; check if curent zone should be checked
 ; if yes - check current zone
 ; else - shift source zones mask
 and b
 pop b
 skz
 bra zone_match ; 1
 
shift_mask
 ; shift source zones mask right by dividing to 2
 psh 2
 ex b, dw, 0
 div dw
 up b, 4 ; bring 'current zone id' to top
 ; continue loop
 bra loop
 
zone_match
 up b, 4 ; bring 'current zone id' to top
 dup b ; save 'current zone id'
 ex b, w, 0 ; expand it to word
 pw ZONE_DETECT_FLAG_BASE - 1 ; get zone detect base
 add w ; calculate address of current zone detect flag
 inp w, b ; get current zone detect flag
 pop b ; read detect flag
 ; if has flag - set on
 ; else - shift mask and continue
 skz
 bra detector_active
 up dw, 1
 bra shift_mask

detector_inactive
 ; dispose 'current zone id' and 'source zones mask'
 pop b
 pop dw
 ; check off time
 dup dw ; save 'off time'
 ; get current timestamp
 pb TIMESTAMP
 inp b, dw
 ; compare 'current timestamp' and 'off time'
 ; if 'current timestamp' greater - dispose 'off time' and deactivate
 ; else - activate
 cmp dw
 skn
 bra do_activate
 pop dw

do_deactivate
 psh ~active_state & 1
 ret

detector_active
 ; dispose 'current zone id' and 'source zones mask'
 pop b
 pop dw
 ; dispose previous 'off time'
 pop dw
 ; calculate new 'off time' and activate
 pb TIMESTAMP
 inp b, dw
 pw delay_to_off
 ex w, dw, 1
 add dw
 
do_activate 
 psh active_state & 1
 ret
 

check_time_span
 dup dw
 cmp w
 pb get_now
 for b
 swp w ; swap so that N-flag reflects the result
 ; compare 'start period time' and 'end period time'
 ; if 'end period time' greater - time continuous
 ; else - time split
 skn
 bra time_continuous
; time interval within connected days 
time_split
 ; compare 'current day time' and 'start period time'
 ; if 'current day time' greater - go to time_check_enough
 ; else go to time_check_to to check 'end period time'
 cmp w
 skn
 bra time_check_enough
 bra time_check_to
; time interval within one day 
time_continuous
 ; compare 'current day time' and 'start period time'
 ; if 'current day time' greater - go check 'end period time'
 ; else - go to time_check_enough
 cmp w
 skp
 bra time_check_enough
time_check_to
 ; get current time of day
 pb get_now
 for b
 ; compare 'current day time' and 'end period time'. result in n-flag
 cmp w
 bra check_time_span_ret
time_check_enough
 ; dispose unused 'to' 
 pop w
check_time_span_ret
 ; if 'current day time' greater - set flag to check detector
 ; else continue
 skn
 inc b
 snz
 dec b
 ; dispose either matched or default value
 pb check_sched
 jmp b

; get current time of day in minutes
get_now
 pb RT_HOUR
 inp b, w
 pw 60
 mul w
 pb RT_MIN
 inp b, w
 add w
 up b, 2
 jmp b
