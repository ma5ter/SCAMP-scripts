; common TOS sizes
b equ 0
w equ 1
dw equ 2

;sections equ 13 ; (param) monitored sections
;delay equ 3 ; (param) up to 16 bits in seconds
;action equ 1 ; (param) active state (what to do `on` or `off` when active)

pb macro ; byte
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; push word macro
pw macro
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

; exp instruction with parameters
ex macro
 psh ($1 & 3)
 nib ((($3 & 1) << 3) | ($2 & 3))
 exp
endm

; BEGIN
 ; set off if no selected sections
 pb sections
 pop b
 snz
 ret
 ; check last state
 ; if was active - continue 
 ; else - go to was_inactive
 psh action
 xor b
 pop b
 skz
 bra was_inactive ; was off
 ; check for all monitored guard section armed
 ; if yes - set on
 ; else - set off
 pb ARMED_SECTIONS ; was on
 inp b, b
 pb sections
 and b
 pb GUARD_SECTIONS
 inp b, b
 pb sections
 and b
 cmp b
 skz
 bra set_off
 bra set_on

was_inactive
 ; check for all monitored guard section armed
 ; if yes - check for timer
 ; else dispose all and set off
 pb ARMED_SECTIONS
 inp b, b
 pb sections
 and b
 pb GUARD_SECTIONS
 inp b, b
 pb sections
 and b
 cmp b
 snz
 bra check_timer_on ; armed
 pop dw ; disarmed
 bra set_off
 
set_on
 psh action & 1
 ret
 
set_off
 psh ~action & 1
 ret 
 
check_timer_on
 ; check if timer started
 ; if yes - check timer
 ; else start timer
 dup dw
 pop dw
 snz
 bra start_timer
 
check_timer
 dup dw ; save 'delay end time'
 ; get 'current timestamp'
 psh TIMESTAMP
 inp b, dw
 ; compare 'current timestamp' and 'delay end time'
 ; if 'current timestamp' is greater - dispose 'delay end time' and set on
 ; else set off
 cmp dw
 skn
 bra set_off
 pop dw
 bra set_on
 
start_timer
 ; calculate timer end time and set off
 pop dw ; dispose everything
 ; get current timestamp
 psh TIMESTAMP
 inp b, dw
 pw delay
 ex w, dw, 1
 add dw ; add 'delay time' to 'current timestamp'
 bra set_off