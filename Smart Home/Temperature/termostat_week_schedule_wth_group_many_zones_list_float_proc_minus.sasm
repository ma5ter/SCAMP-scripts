; time-span based temperature control with hysteresis
; example by ma5ter

; settings
;mo_temp equ 1
;mo_def equ 1
;mo_from equ 8
;mo_to equ 16

;tu_temp equ 23
;tu_def equ 18
;tu_from equ 8
;tu_to equ 16

;we_temp equ 30
;we_def equ 25
;we_from equ 6
;we_to equ 14

;th_temp equ 23
;th_def equ 18
;th_from equ 8
;th_to equ 16

;fr_temp equ 23
;fr_def equ 18
;fr_from equ 8
;fr_to equ 16

;sa_temp equ 23
;sa_def equ 18
;sa_from equ 8
;sa_to equ 16

;su_temp equ 23
;su_def equ 18
;su_from equ 8
;su_to equ 16

;hysteresis equ 150

;zone_mask equ 1 ; max 4294967295

;action equ 1

; common TOS sizes
b equ 0
w equ 1
dw equ 2


pb macro ; byte
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

pw macro ; word
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm

pd macro ; dword
 psh (($1 >> 28) & 15)
 nib (($1 >> 24) & 15)
 psh (($1 >> 20) & 15)
 nib (($1 >> 16) & 15)
 psh (($1 >> 12) & 15)
 nib (($1 >> 8) & 15)
 psh (($1 >> 4) & 15)
 nib ($1 & 15)
endm


; mov instruction with parameters
up macro
 psh (((($1 & 3) | ($2 << 2)) >> 4) & 15)
 nib (($1 & 3) | ($2 << 2) & 15)
 mov
endm

ex macro
 psh ($1 & 3)
 nib ((($3 & 1) << 3) | ($2 & 3))
 exp
endm

; macro to generate temperature selector for time span
; parameters:
;   $1 - default value
;   $2 - value when period matched
;   $3 - hour from (inclusive), may be greater than hour to
;   $4 - hour to (inclusive), may be less than hour from
; on entry TOS contains return address
selector macro
 psh (($2 >> 4) & 15)
 nop
 nib ($2 & 15)
 psh (($1 >> 4) & 15)
 nop
 nib ($1 & 15)
 psh $4 ; to
 psh $3 ; from
 psh ((check_time_span >> 4) & 15)
 nib (check_time_span & 15)
 jmp b
endm
selector_size equ 11

; BEGIN
 ; input weekday
 
 psh RT_DAY
 inp b, b
 ; choose selector
 pb selector_size
 mul b
 ; select desired temperature
 pb day_selector
 add b
 for b
 ; temperature selected
 
 ; now we have temperatue & previous switch value in TOS
 ;swp b
 ; get temperature value from zone
 ex b, w, 1
 pw 128
 add w
 pw 10
 mul w
 
 pw 0 ;summ
 psh 0 ;zone count to check 
 pd zone_mask
 psh 0
loop 
 inc b
 dup b
 psh 33
 cmp b
 skp
 bra 3
 pb calc_tmp
 jmp b
 up dw, 1
 dup b
 psh 1
 and b
 pop b
 skz
 bra zone_match ; 1
    ; 0
 
shift_mask
 psh 2
 ex b, dw, 0
 div dw
 up b, 4
 bra loop
 
zone_match
 up b, 4
 dup b
 ex b, w, 0
 pw ZONE_TEMPERATURE_BASE - 1
 add w
 inp w, b
 ex b, w, 1
 pw 128
 add w
 up w, 8
 add w
 up b, 7
 inc b
 up b, 3
 up dw, 4
 pb shift_mask
 jmp b
 
calc_tmp
 pop b
 pop dw
 ex b, w, 0
 swp w
 pw 10
 mul w
 swp w
 div w

 ; implement hysteresis )))
 ;swp b
 pw hysteresis / 10
 up b, 6
 psh action
 xor b
 pop b
 snz
 bra was_on ;was on
 ;was off
was_off
 ; if was off we should check hysteresis loop for lower rim
 add w
 cmp w
 snz
 bra set_on
 bra done
was_on
 ; if was off we should check hysteresis loop for upper rim
 sub w
 cmp w
 snz
 bra set_off
done
 skp
 bra set_off
 
set_on
 psh action & 1
 ret
 
set_off
 psh ~action & 1
 ret

; subroutine to return value for time span
; on entry TOS contains:
;   hour from
;   hour to
;   matched value
;   default value
; on return TOS byte will be the desired value
; NOTE: due to optimisation entry point should reside within 63 first addresses 
check_time_span
 ; check if from <= to 
 ;swp b
 dup w
 cmp b
 ; prepare check time greater or equals than 'from'
 pb RT_HOUR
 inp b, b
 swp b ; swap so that N-flag reflects the result

 skn
 bra time_continuous
; time interval within connected days 
time_split 
 cmp b
 skn
 bra time_check_enough
 bra time_check_to
; time interval within one day 
time_continuous
 ; check time greater or equals than 'from'
 cmp b
 skp
 bra time_check_enough
time_check_to
 ; check time less or equals than 'to'
 pb RT_HOUR
 inp b, b
 cmp b
 ; result is flag N
 bra check_time_span_ret
time_check_enough
 ; dispose unused 'to' 
 pop b
check_time_span_ret
 skp
 swp b
 snz
 swp b
 ; dispose either matched or default value
 pop b
 swp b
 jmp b


; each day selector size is exactly `selector_size` bytes
day_selector
 selector mo_def, mo_temp, mo_from, mo_to 
 selector tu_def, tu_temp, tu_from, tu_to 
 selector we_def, we_temp, we_from, we_to 
 selector th_def, th_temp, th_from, th_to 
 selector fr_def, fr_temp, fr_from, fr_to 
 selector sa_def, sa_temp, sa_from, sa_to 
 selector su_def, su_temp, su_from, su_to
